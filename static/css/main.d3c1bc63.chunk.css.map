{"version":3,"sources":["webpack://src/index.scss","webpack://src/App.scss","webpack://src/styles/include-media.scss","webpack://src/styles/navbar.scss","webpack://src/styles/header.scss","webpack://src/styles/arrowbutton.scss","webpack://src/styles/projectcard.scss","webpack://src/styles/projects.scss","webpack://src/styles/about.scss","webpack://src/styles/skills.scss","webpack://src/styles/footer.scss","webpack://src/styles/uparrow.scss"],"names":[],"mappings":"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","file":"main.d3c1bc63.chunk.css","sourcesContent":["* {\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  // font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n  //   'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n  //   sans-serif;\n  margin: 0;\n  padding: 0;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n// code {\n//   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n//     monospace;\n// }\n\n@font-face {\n  font-family: 'FLURO';\n  src: url('./fonts/FLUROLight.eot');\n  src: url('./fonts/FLUROLight.eot?#iefix') format('embedded-opentype'),\n    url('./fonts/FLUROLight.woff2') format('woff2'),\n    url('./fonts/FLUROLight.woff') format('woff'),\n    url('./fonts/FLUROLight.ttf') format('truetype'),\n    url('./fonts/FLUROLight.svg#FLUROLight') format('svg');\n  font-weight: 300;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'FLURO';\n  src: url('./fonts/FLUROBold.eot');\n  src: url('./fonts/FLUROBold.eot?#iefix') format('embedded-opentype'),\n    url('./fonts/FLUROBold.woff2') format('woff2'),\n    url('./fonts/FLUROBold.woff') format('woff'),\n    url('./fonts/FLUROBold.ttf') format('truetype'),\n    url('./fonts/FLUROBold.svg#FLUROBold') format('svg');\n  font-weight: bold;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'FLURO';\n  src: url('./fonts/FLUROSemibold.eot');\n  src: url('./fonts/FLUROSemibold.eot?#iefix') format('embedded-opentype'),\n    url('./fonts/FLUROSemibold.woff2') format('woff2'),\n    url('./fonts/FLUROSemibold.woff') format('woff'),\n    url('./fonts/FLUROSemibold.ttf') format('truetype'),\n    url('./fonts/FLUROSemibold.svg#FLUROSemibold') format('svg');\n  font-weight: 60;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'FLURO';\n  src: url('./fonts/FLURORegular.eot');\n  src: url('./fonts/FLURORegular.eot?#iefix') format('embedded-opentype'),\n    url('./fonts/FLURORegular.woff2') format('woff2'),\n    url('./fonts/FLURORegular.woff') format('woff'),\n    url('./fonts/FLURORegular.ttf') format('truetype'),\n    url('./fonts/FLURORegular.svg#FLURORegular') format('svg');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'FLURO Bold Outline';\n  src: url('./fonts/FLUROBoldOutline.eot');\n  src: url('./fonts/FLUROBoldOutline.eot?#iefix') format('embedded-opentype'),\n    url('./fonts/FLUROBoldOutline.woff2') format('woff2'),\n    url('./fonts/FLUROBoldOutline.woff') format('woff'),\n    url('./fonts/FLUROBoldOutline.ttf') format('truetype'),\n    url('./fonts/FLUROBoldOutline.svg#FLUROBoldOutline') format('svg');\n  font-weight: bold;\n  font-style: normal;\n  font-display: swap;\n}\n","@import './styles/include-media.scss';\n\n* {\n  font-family: 'Fluro';\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  overflow-y: scroll;\n  overflow-x: hidden;\n  background-color: #000;\n}\n\nsection {\n  background-color: #fffef6;\n  display: flex;\n  align-items: center;\n}\n\n.container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton {\n  @include media('>=phone', '<smdesktop') {\n    font-size: 16px;\n  }\n\n  @include media('>=smdesktop', '<mddesktop') {\n    font-size: 18px;\n  }\n\n  @include media('>=mddesktop', '<=lgdesktop') {\n    font-size: 18px;\n  }\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'lgphone': 425px,\n  'tablet': 768px,\n  'desktop': 1024px,\n  'smdesktop': 1280px,\n  'mddesktop': 1440px,\n  'lgdesktop': 1920px,\n  '4k': 2560px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x':\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x':\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    'px': 1px,\n    'cm': 1cm,\n    'mm': 1mm,\n    '%': 1%,\n    'ch': 1ch,\n    'pc': 1pc,\n    'in': 1in,\n    'em': 1em,\n    'rem': 1rem,\n    'pt': 1pt,\n    'ex': 1ex,\n    'vw': 1vw,\n    'vh': 1vh,\n    'vmin': 1vmin,\n    'vmax': 1vmax,\n  );\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge(\n    $media-expressions,\n    $tweak-media-expressions\n  ) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","nav {\n  width: 100vw;\n  height: auto;\n\n  .navbar-wrapper {\n    width: 85vw;\n    margin-top: 5vh;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    .name {\n      color: white;\n    }\n\n    .link-wrapper {\n      button {\n        text-decoration: none;\n        padding: 12px;\n        font-family: 'Fluro';\n        opacity: 0.6;\n        transition: all 0.2s ease-in-out;\n        background-color: transparent;\n        outline: none;\n        border: 0px;\n        cursor: pointer;\n        color: #fffef6;\n\n        &:hover {\n          opacity: 1;\n        }\n      }\n\n      .active {\n        color: white;\n      }\n    }\n  }\n}\n","@import './include-media.scss';\n\n$text-color: #fffef6;\n\nheader {\n  @include media('>=phone', '<lgphone') {\n    height: 750px;\n  }\n\n  @include media('>=lgphone', '<mddesktop') {\n    height: 800px;\n  }\n\n  @include media('>=tablet', '<desktop') {\n    height: 800px;\n  }\n\n  @include media('>=desktop', '<smdesktop') {\n    height: 800px;\n  }\n\n  @include media('>=smdesktop') {\n    height: 800px;\n  }\n\n  @include media('>=mddesktop', '<=lgdesktop') {\n    height: 850px;\n  }\n\n  .container {\n    justify-content: normal;\n  }\n}\n\n.header-wrapper {\n  width: 85vw;\n  padding-top: 80px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  h1 {\n    color: $text-color;\n    margin-bottom: 20px;\n    text-align: left;\n\n    @include media('>=phone', '<lgphone') {\n      font-size: 50px;\n    }\n\n    @include media('>=lgphone', '<mddesktop') {\n      font-size: 50px;\n    }\n\n    @include media('>=tablet', '<desktop') {\n      font-size: 75px;\n    }\n\n    @include media('>=desktop', '<smdesktop') {\n      font-size: 75px;\n    }\n\n    @include media('>=smdesktop', '<=lgdesktop') {\n      font-size: 100px;\n    }\n  }\n\n  p {\n    margin-bottom: 65px;\n    color: $text-color;\n\n    @include media('>=phone', '<tablet') {\n      font-size: 16px;\n      width: 275px;\n    }\n\n    @include media('>=tablet', '<desktop') {\n      font-size: 18px;\n      width: 375px;\n    }\n\n    @include media('>=desktop', '<smdesktop') {\n      font-size: 18px;\n      width: 375px;\n    }\n\n    @include media('>=smdesktop', '<=lgdesktop') {\n      width: 375px;\n      font-size: 18px;\n    }\n  }\n\n  .downward-arrow {\n    cursor: pointer;\n    margin-top: 30px;\n  }\n}\n",".arrow {\n  --delay: 0.15s;\n  --colour: #f3cb2b;\n  position: relative;\n  display: block;\n  width: 100px;\n  height: 100px;\n  margin: 0 auto;\n  border-radius: 50%;\n  border: 3px solid var(--colour);\n  box-sizing: border-box;\n  transform: rotate(90deg);\n  transition: all 0.5s ease;\n}\n\n.arrow::before,\n.arrow::after {\n  content: '';\n  position: absolute;\n  display: block;\n  box-sizing: border-box;\n  transition: all var(--delay) ease-in-out;\n}\n\n/* The arrow body */\n.arrow::before {\n  width: 0%;\n  height: 3px;\n  left: -50px;\n  top: 50%;\n\n  background: var(--colour);\n  transform: translate(0, -50%);\n}\n\n/* The arrow head */\n.arrow::after {\n  width: 20px;\n  height: 20px;\n  left: 21px;\n  top: 50%;\n\n  border: 3px solid var(--colour);\n  border-left: 0;\n  border-bottom: 0;\n  transform: translate(50%, -50%) rotate(45deg);\n}\n\n.arrow:hover {\n  cursor: pointer;\n  border-color: transparent;\n  transition: all var(--delay) ease;\n}\n.arrow:hover::before {\n  opacity: 1;\n  left: -5px;\n  width: calc(100% + 5px);\n}\n.arrow:hover::after {\n  width: 30px;\n  height: 30px;\n  left: calc(100px - 46px / 2);\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n",".card {\n  width: 100%;\n  height: 300px;\n  border: 1px solid black;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n\n  .content-wrapper {\n    opacity: 0;\n    text-align: left;\n    height: 100%;\n    display: flex;\n    align-items: center;\n\n    .content {\n      padding: 50px;\n\n      h3 {\n        font-size: 18px;\n        margin-bottom: 15px;\n        color: white;\n      }\n\n      p {\n        font-size: 16px;\n        margin-bottom: 15px;\n        color: white;\n      }\n    }\n  }\n}\n\n.content-wrapper:hover {\n  text-align: left;\n  opacity: 1;\n  transition: all 0.4s ease-in-out;\n  cursor: default;\n  background-color: black;\n  height: 100%;\n  width: 100%;\n}\n\n.card__buttons {\n  padding-top: 15px;\n\n  .card__button {\n    text-decoration: none;\n    padding: 10px;\n\n    font-family: 'Fluro';\n    opacity: 0.6;\n    transition: all 0.2s ease-in-out;\n    background-color: white;\n    outline: none;\n    border: 0px;\n    cursor: pointer;\n    color: black;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n\n  .active {\n    color: white;\n  }\n}\n","@import './include-media.scss';\n\n.work-wrapper {\n  width: 90vw;\n  padding-top: 70px;\n  padding-bottom: 95px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  h3 {\n    align-self: end;\n  }\n\n  .grid {\n    display: grid;\n    margin-top: 70px;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 50px;\n\n    @include media('>=phone', '<smdesktop') {\n      grid-template-columns: 1fr;\n    }\n\n    @include media('>=smdesktop', '<mddesktop') {\n      grid-template-columns: 1fr 1fr;\n    }\n\n    @include media('>=desktop', '<=lgdesktop') {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n}\n","@import './include-media.scss';\n\n.about-wrapper {\n  width: 90vw;\n  padding-top: 70px;\n  padding-bottom: 95px;\n  display: grid;\n  grid-template-columns: 1fr;\n  align-items: center;\n\n  @include media('>=phone', '<tablet') {\n    grid-template-columns: 1fr;\n  }\n\n  @include media('>=tablet', '<=lgdesktop') {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  h3 {\n    align-self: end;\n  }\n\n  .image-content {\n    @include media('>=phone', '<lgphone') {\n      margin-bottom: 55px;\n    }\n\n    @include media('>=lgphone', '<tablet') {\n      margin-bottom: 55px;\n    }\n\n    @include media('>=smdesktop', '<mddesktop') {\n      justify-self: center;\n    }\n\n    @include media('>=mddesktop', '<=lgdesktop') {\n      justify-self: center;\n    }\n\n    img {\n      height: auto;\n      width: 425px;\n\n      @include media('>=phone', '<lgphone') {\n        width: 280px;\n      }\n\n      @include media('>=lgphone', '<tablet') {\n        width: 345px;\n      }\n\n      @include media('>=tablet', '<desktop') {\n        width: 315px;\n      }\n\n      @include media('>=desktop', '<smdesktop') {\n        width: 350px;\n      }\n\n      @include media('>=smdesktop', '<mddesktop') {\n        width: 350px;\n      }\n\n      @include media('>=mddesktop', '<=lgdesktop') {\n        width: 450px;\n      }\n    }\n  }\n\n  .info-text {\n    @include media('>=phone', '<tablet') {\n      padding-right: 25px;\n    }\n\n    @include media('>=tablet', '<=lgdesktop') {\n      padding: 0px 5px 0px 20px;\n    }\n\n    h2 {\n      margin-bottom: 20px;\n    }\n\n    p {\n      margin-bottom: 20px;\n    }\n\n    .buttons {\n      .button {\n        display: flex;\n        justify-content: center;\n        text-decoration: none;\n        padding: 10px;\n        font-family: 'Fluro';\n        min-width: 200px;\n        max-width: 350px;\n        transition: all 0.5s ease-in-out;\n        color: black;\n        background-color: #fffef6;\n        outline: black;\n        border: 1px;\n        cursor: pointer;\n        color: black;\n        border-style: solid;\n        border-color: black;\n        margin-bottom: 10px;\n\n        &:hover {\n          opacity: 1;\n          background-color: black;\n          color: #fffef6;\n        }\n      }\n    }\n\n    .linkss {\n      margin-bottom: 30px;\n\n      .fa-ul {\n        margin-left: 1.5em;\n      }\n\n      .fa-ul > li {\n        margin-bottom: 15px;\n      }\n    }\n  }\n}\n","@import './include-media.scss';\n\n#skills {\n  background-color: #bfccb8;\n}\n\n.skills-wrapper {\n  width: 85vw;\n  padding-top: 70px;\n  padding-bottom: 95px;\n  display: flex;\n  justify-content: space-between;\n\n  h2 {\n    font-family: fluro bold outline;\n    font-size: 60px;\n    margin-bottom: 30px;\n  }\n\n  @include media('>=phone', '<desktop') {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .skills-list {\n    font-size: 18px;\n    text-align: center;\n    align-self: center;\n\n    @include media('>=phone', '<desktop') {\n      width: 100%;\n    }\n\n    @include media('>=desktop', '<=lgdesktop') {\n      width: 60%;\n    }\n  }\n}\n","footer {\n  min-height: 180px;\n  overflow: hidden;\n  background-color: black;\n}\n\n.links-wrapper {\n  width: 85vw;\n  display: flex;\n  justify-content: space-between;\n\n  margin-top: 35px;\n\n  .icons {\n    align-self: center;\n\n    a {\n      margin-right: 10px;\n    }\n  }\n\n  .upwards-arrow {\n    transform: rotate(380deg);\n  }\n}\n",".up-arrow {\n  --delay: 0.15s;\n  --colour: #f3cb2b;\n  position: relative;\n  display: block;\n  width: 100px;\n  height: 100px;\n  margin: 0 auto;\n  border-radius: 50%;\n  border: 3px solid var(--colour);\n  box-sizing: border-box;\n  transform: rotate(-90deg);\n  transition: all 0.5s ease;\n}\n\n.up-arrow::before,\n.up-arrow::after {\n  content: '';\n  position: absolute;\n  display: block;\n  box-sizing: border-box;\n  transition: all var(--delay) ease-in-out;\n}\n\n/* The arrow body */\n.up-arrow::before {\n  width: 0%;\n  height: 3px;\n  left: -50px;\n  top: 50%;\n\n  background: var(--colour);\n  transform: translate(0, -50%);\n}\n\n/* The arrow head */\n.up-arrow::after {\n  width: 20px;\n  height: 20px;\n  left: 21px;\n  top: 50%;\n\n  border: 3px solid var(--colour);\n  border-left: 0;\n  border-bottom: 0;\n  transform: translate(50%, -50%) rotate(45deg);\n}\n\n.up-arrow:hover {\n  cursor: pointer;\n  border-color: transparent;\n  transition: all var(--delay) ease;\n}\n.up-arrow:hover::before {\n  opacity: 1;\n  left: -5px;\n  width: calc(100% + 5px);\n}\n.up-arrow:hover::after {\n  width: 30px;\n  height: 30px;\n  left: calc(100px - 46px / 2);\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n"]}